{
  "contractName": "EACAggregatorProxy",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_accessController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessController",
      "outputs": [
        {
          "internalType": "contract AccessControllerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "aggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "confirmAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "phaseAggregators",
      "outputs": [
        {
          "internalType": "contract AggregatorV2V3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "phaseId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "proposeAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedAggregator",
      "outputs": [
        {
          "internalType": "contract AggregatorV2V3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessController",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "proposedGetRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "proposedLatestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"confirmAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"phaseAggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"proposeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedLatestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"acceptOwnership()\":{\"details\":\"Allows an ownership transfer to be completed by the recipient.\"},\"confirmAggregator(address)\":{\"details\":\"Reverts if the given address doesn't match what was previously proposed\",\"params\":{\"_aggregator\":\"The new address for the aggregator contract\"}},\"getAnswer(uint256)\":{\"details\":\"overridden function to add the checkAccess() modifier#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.\",\"params\":{\"_roundId\":\"the answer number to retrieve the answer for\"}},\"getRoundData(uint80)\":{\"details\":\"Note that answer and updatedAt may change between queries.\",\"params\":{\"_roundId\":\"the round ID to retrieve the round data for\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)\",\"roundId\":\"is the round ID from the aggregator for which the data was retrieved combined with a phase to ensure that round IDs get larger as time moves forward.\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"getTimestamp(uint256)\":{\"details\":\"overridden function to add the checkAccess() modifier#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.\",\"params\":{\"_roundId\":\"the answer number to retrieve the updated timestamp for\"}},\"latestAnswer()\":{\"details\":\"overridden function to add the checkAccess() modifier#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"latestRound()\":{\"details\":\"overridden function to add the checkAccess() modifier#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"latestRoundData()\":{\"details\":\"Note that answer and updatedAt may change between queries.\",\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)\",\"roundId\":\"is the round ID from the aggregator for which the data was retrieved combined with a phase to ensure that round IDs get larger as time moves forward.\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"latestTimestamp()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"proposeAggregator(address)\":{\"params\":{\"_aggregator\":\"The new address for the aggregator contract\"}},\"proposedGetRoundData(uint80)\":{\"params\":{\"_roundId\":\"the round ID to retrieve the round data for\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed.\",\"roundId\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"setController(address)\":{\"params\":{\"_accessController\":\"The new address for the accessController contract\"}},\"transferOwnership(address)\":{\"details\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"title\":\"External Access Controlled Aggregator Proxy\"},\"userdoc\":{\"methods\":{\"aggregator()\":{\"notice\":\"returns the current phase's aggregator address.\"},\"confirmAggregator(address)\":{\"notice\":\"Allows the owner to confirm and change the address to the proposed aggregator\"},\"decimals()\":{\"notice\":\"represents the number of decimals the aggregator responses represent.\"},\"description()\":{\"notice\":\"returns the description of the aggregator the proxy points to.\"},\"getAnswer(uint256)\":{\"notice\":\"get past rounds answers\"},\"getRoundData(uint80)\":{\"notice\":\"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.\"},\"getTimestamp(uint256)\":{\"notice\":\"get block timestamp when an answer was last updated\"},\"latestAnswer()\":{\"notice\":\"Reads the current answer from aggregator delegated to.\"},\"latestRound()\":{\"notice\":\"get the latest completed round where the answer was updated\"},\"latestRoundData()\":{\"notice\":\"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.\"},\"latestTimestamp()\":{\"notice\":\"get the latest completed round where the answer was updated. This ID includes the proxy's phase, to make sure round IDs increase even when switching to a newly deployed aggregator.\"},\"phaseId()\":{\"notice\":\"returns the current phase's ID.\"},\"proposeAggregator(address)\":{\"notice\":\"Allows the owner to propose a new address for the aggregator\"},\"proposedGetRoundData(uint80)\":{\"notice\":\"Used if an aggregator contract has been proposed.\"},\"proposedLatestRoundData()\":{\"notice\":\"Used if an aggregator contract has been proposed.\"},\"setController(address)\":{\"notice\":\"Allows the owner to update the accessController contract address.\"},\"version()\":{\"notice\":\"the version number representing the type of aggregator the proxy points to.\"}},\"notice\":\"A trusted proxy for updating where current answers are read fromThis contract provides a consistent address for the Aggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is trusted to update it.Only access enabled addresses are allowed to access getters for aggregated answers and round information.\"}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/EACAggregatorProxy.sol\":\"EACAggregatorProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/AggregatorProxy.sol\":{\"keccak256\":\"0x0dc103f0c9ae96d997977e5619a741213313612e16cf978201f6068b4f64636f\",\"urls\":[\"bzz-raw://edad937619b056d53804ebb919d695de31008da89e963a2144b576df8b85d961\",\"dweb:/ipfs/QmfA9QLcx9S3xFRTmaF2R8yNoYNHHaL8fEyhwwz5mcgn1e\"]},\"@chainlink/contracts/src/v0.6/EACAggregatorProxy.sol\":{\"keccak256\":\"0x44aad3e27022e4bf2a264bc0c529d7a8f6944c6065f530c1ac7eb78ae2c207d5\",\"urls\":[\"bzz-raw://7edc53bd802bbe56c2e66f7ba6cde90a0cec32b9a8e59bfa7442a71b8f442121\",\"dweb:/ipfs/QmWthp4erDS48U4tAzFm9DU8fYAd7Qq1yybg4wc6pi6mBF\"]},\"@chainlink/contracts/src/v0.6/Owned.sol\":{\"keccak256\":\"0xd791ecc6095e7f3b0a49f036f1fd9011873e5c7c04d2b28292d11e15c0967b75\",\"urls\":[\"bzz-raw://1cc68291e0dc79fb6a140a2f4e667392fe71d0e7814bad3b56ae47dd13f69ba7\",\"dweb:/ipfs/QmQFTFFBjaJsb7sivr25R4XfNKW84nDjZWSGMY7Cc8eqqC\"]},\"@chainlink/contracts/src/v0.6/interfaces/AccessControllerInterface.sol\":{\"keccak256\":\"0x67b8142df434bec7c794762cccf6576c74b0d0f52bc24a17e05d31022010f267\",\"urls\":[\"bzz-raw://8e43ce1eefefdd7e2d9de3368384c6eb64bf98577b8e5958e9f092dcbfa0d680\",\"dweb:/ipfs/QmW3Nd3AUa146oC1UJJoy99nxGioHQCwE4D3pdy4deq9uR\"]},\"@chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol\":{\"keccak256\":\"0xbd2b9524ed06f150fefaf4ea600fa8b426d644f17c9f7ddd6d793c19557c23ca\",\"urls\":[\"bzz-raw://32e224693884f94929ab3128a1f780c517c8c294634f7f0ef56b411131fa9858\",\"dweb:/ipfs/QmYC99ZwJoPRSmBGV69uwQwdotVcGYC2AMUjLnS48PYiXq\"]},\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol\":{\"keccak256\":\"0xb2e32f1292bd9c3bc2f4823ae6457bb81a6497138a9bf454c46dae73553097d4\",\"urls\":[\"bzz-raw://7c43cffc680e119f38fa16950d57c29705f6351522fa0a2f3ac20cc0bfa5416c\",\"dweb:/ipfs/QmZtPBiuFkZfoCSx2M98HHbmCSY12VFHKZdtwFN1K1R5qD\"]},\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"urls\":[\"bzz-raw://64a15f4349aea6e60703f581a6280b71d6adb35ee74d2f3c4f130a2adc3efee3\",\"dweb:/ipfs/QmdVoSQvGfJNPnjQsAs7ZN3ueWghzTa72jSqzhGiQNDpkL\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162001d0638038062001d068339818101604052604081101561003557600080fd5b508051602090910151600080546001600160a01b0319163317905581610063816001600160e01b0361007d16565b50610076816001600160e01b036100ec16565b505061016d565b60028054604080518082018252600161ffff80851691909101168082526001600160a01b0395909516602091820181905261ffff19909316851762010000600160b01b0319166201000084021790935560009384526004909252912080546001600160a01b0319169091179055565b6000546001600160a01b0316331461014b576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b611b89806200017d6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638f6b4d91116100c3578063bc43cbaf1161007c578063bc43cbaf1461038a578063c159730414610392578063e8c4be30146103b3578063f2fde38b146103bb578063f8a2abd3146103e1578063feaf968c146104075761014d565b80638f6b4d91146102d657806392eefe9b146102de5780639a6fc8f514610304578063a928c0961461032a578063b5ab58dc14610350578063b633620c1461036d5761014d565b80636001ac53116101155780636001ac53146101d5578063668a0f02146102375780637284e4161461023f57806379ba5097146102bc5780638205bf6a146102c65780638da5cb5b146102ce5761014d565b8063245a7bfc14610152578063313ce5671461017657806350d25bcd1461019457806354fd4d50146101ae57806358303b10146101b6575b600080fd5b61015a61040f565b604080516001600160a01b039092168252519081900360200190f35b61017e610424565b6040805160ff9092168252519081900360200190f35b61019c6104a8565b60408051918252519081900360200190f35b61019c6105b0565b6101be610603565b6040805161ffff9092168252519081900360200190f35b6101fb600480360360208110156101eb57600080fd5b50356001600160501b031661060d565b604080516001600160501b0396871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b61019c610776565b610247610878565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610281578181015183820152602001610269565b50505050905090810190601f1680156102ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c46109bd565b005b61019c610a6c565b61015a610b6e565b6101fb610b7d565b6102c4600480360360208110156102f457600080fd5b50356001600160a01b0316610ce4565b6101fb6004803603602081101561031a57600080fd5b50356001600160501b0316610d5e565b6102c46004803603602081101561034057600080fd5b50356001600160a01b0316610e69565b61019c6004803603602081101561036657600080fd5b5035610f3f565b61019c6004803603602081101561038357600080fd5b5035611049565b61015a61114c565b61015a600480360360208110156103a857600080fd5b503561ffff1661115b565b61015a611176565b6102c4600480360360208110156103d157600080fd5b50356001600160a01b0316611185565b6102c4600480360360208110156103f757600080fd5b50356001600160a01b031661122e565b6101fb6112a8565b6002546201000090046001600160a01b031690565b6000600260000160029054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561047757600080fd5b505afa15801561048b573d6000803e3d6000fd5b505050506040513d60208110156104a157600080fd5b5051905090565b6005546000906001600160a01b0316801580610565575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b15801561053857600080fd5b505afa15801561054c573d6000803e3d6000fd5b505050506040513d602081101561056257600080fd5b50515b6105a2576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6105aa6113b2565b91505090565b6000600260000160029054906101000a90046001600160a01b03166001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561047757600080fd5b60025461ffff1690565b60055460009081908190819081906001600160a01b03168015806106d2575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b1580156106a557600080fd5b505afa1580156106b9573d6000803e3d6000fd5b505050506040513d60208110156106cf57600080fd5b50515b61070f576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6003546001600160a01b031661075a576040805162461bcd60e51b815260206004820152601e6024820152600080516020611b34833981519152604482015290519081900360640190fd5b61076387611405565b939b929a50909850965090945092505050565b6005546000906001600160a01b0316801580610833575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b15801561080657600080fd5b505afa15801561081a573d6000803e3d6000fd5b505050506040513d602081101561083057600080fd5b50515b610870576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6105aa611502565b6060600260000160029054906101000a90046001600160a01b03166001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b1580156108cb57600080fd5b505afa1580156108df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561090857600080fd5b810190808051604051939291908464010000000082111561092857600080fd5b90830190602082018581111561093d57600080fd5b825164010000000081118282018810171561095757600080fd5b82525081516020918201929091019080838360005b8381101561098457818101518382015260200161096c565b50505050905090810190601f1680156109b15780820380516001836020036101000a031916815260200191505b50604052505050905090565b6001546001600160a01b03163314610a15576040805162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b604482015290519081900360640190fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6005546000906001600160a01b0316801580610b29575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d6020811015610b2657600080fd5b50515b610b66576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6105aa6115b0565b6000546001600160a01b031681565b60055460009081908190819081906001600160a01b0316801580610c42575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b158015610c1557600080fd5b505afa158015610c29573d6000803e3d6000fd5b505050506040513d6020811015610c3f57600080fd5b50515b610c7f576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6003546001600160a01b0316610cca576040805162461bcd60e51b815260206004820152601e6024820152600080516020611b34833981519152604482015290519081900360640190fd5b610cd2611603565b95509550955095509550509091929394565b6000546001600160a01b03163314610d3c576040805162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60055460009081908190819081906001600160a01b0316801580610e23575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b158015610df657600080fd5b505afa158015610e0a573d6000803e3d6000fd5b505050506040513d6020811015610e2057600080fd5b50515b610e60576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b610763876116f9565b6000546001600160a01b03163314610ec1576040805162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b604482015290519081900360640190fd5b6003546001600160a01b03828116911614610f23576040805162461bcd60e51b815260206004820152601b60248201527f496e76616c69642070726f706f7365642061676772656761746f720000000000604482015290519081900360640190fd5b600380546001600160a01b0319169055610f3c816117f5565b50565b6005546000906001600160a01b0316801580610ffc575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b158015610fcf57600080fd5b505afa158015610fe3573d6000803e3d6000fd5b505050506040513d6020811015610ff957600080fd5b50515b611039576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b61104283611864565b9392505050565b6005546000906001600160a01b0316801580611106575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d602081101561110357600080fd5b50515b611143576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b61104283611941565b6005546001600160a01b031681565b6004602052600090815260409020546001600160a01b031681565b6003546001600160a01b031681565b6000546001600160a01b031633146111dd576040805162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000546001600160a01b03163314611286576040805162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60055460009081908190819081906001600160a01b031680158061136d575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d602081101561136a57600080fd5b50515b6113aa576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b610cd26119e7565b6000600260000160029054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047757600080fd5b60035460009081908190819081906001600160a01b031661145b576040805162461bcd60e51b815260206004820152601e6024820152600080516020611b34833981519152604482015290519081900360640190fd5b60035460408051639a6fc8f560e01b81526001600160501b038916600482015290516001600160a01b0390921691639a6fc8f59160248082019260a092909190829003018186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d60a08110156114d957600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b600061150c611b1c565b5060408051808201825260025461ffff8116808352620100009091046001600160a01b031660208084018290528451633345078160e11b8152945193946115a19463668a0f0292600480840193919291829003018186803b15801561157057600080fd5b505afa158015611584573d6000803e3d6000fd5b505050506040513d602081101561159a57600080fd5b5051611abe565b6001600160501b031691505090565b6000600260000160029054906101000a90046001600160a01b03166001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047757600080fd5b60035460009081908190819081906001600160a01b0316611659576040805162461bcd60e51b815260206004820152601e6024820152600080516020611b34833981519152604482015290519081900360640190fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156116a757600080fd5b505afa1580156116bb573d6000803e3d6000fd5b505050506040513d60a08110156116d157600080fd5b5080516020820151604083015160608401516080909401519299919850965091945092509050565b6000806000806000806000611716886001600160501b0316611ade565b61ffff8216600090815260046020819052604091829020548251639a6fc8f560e01b815267ffffffffffffffff85169281019290925291519395509193506001600160a01b031691639a6fc8f59160248082019260a092909190829003018186803b15801561178457600080fd5b505afa158015611798573d6000803e3d6000fd5b505050506040513d60a08110156117ae57600080fd5b508051602082015160408301516060840151608090940151929a50909850965090945092506117e1878787878787611ae6565b939c929b5090995097509095509350505050565b60028054604080518082018252600161ffff80851691909101168082526001600160a01b0395909516602091820181905261ffff19909316851762010000600160b01b0319166201000084021790935560009384526004909252912080546001600160a01b0319169091179055565b60006001600160501b0382111561187d5750600061193c565b60008061188984611ade565b61ffff821660009081526004602052604090205491935091506001600160a01b0316806118bc576000935050505061193c565b806001600160a01b031663b5ab58dc836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b15801561190a57600080fd5b505afa15801561191e573d6000803e3d6000fd5b505050506040513d602081101561193457600080fd5b505193505050505b919050565b60006001600160501b0382111561195a5750600061193c565b60008061196684611ade565b61ffff821660009081526004602052604090205491935091506001600160a01b031680611999576000935050505061193c565b806001600160a01b031663b633620c836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b15801561190a57600080fd5b60008060008060006119f7611b1c565b5060408051808201825260025461ffff811682526201000090046001600160a01b0316602082018190528251633fabe5a360e21b815292519192909163feaf968c9160048082019260a092909190829003018186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d60a0811015611a8357600080fd5b5080516020820151604083015160608401516080909401518551939a509198509650919450909250610cd29087908790879087908790611ae6565b67ffffffffffffffff1660409190911b69ffff0000000000000000161790565b604081901c91565b6000806000806000611af8868c611abe565b8a8a8a611b058a8c611abe565b939f929e50909c509a509098509650505050505050565b60408051808201909152600080825260208201529056fe4e6f2070726f706f7365642061676772656761746f722070726573656e740000a264697066735822122069bd315dd51a219ec470bc1c04df4c7187e5c185cd13d3b66e4a6b18b1f9948b64736f6c63430006060033",
  "deployedBytecode": "",
  "immutableReferences": {},
  "sourceMap": "583:8941:7:-:0;;;689:161;5:9:-1;2:2;;;27:1;24;17:12;2:2;689:161:7;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;689:161:7;;;;;;;438:5:12;:18;;-1:-1:-1;;;;;;438:18:12;446:10;438:18;;;689:161:7;890:26:6::1;689:161:7::0;-1:-1:-1;;;;;890:13:6::1;:26:::0;:::i:1;:::-;-1:-1:-1::0;813:32:7::1;827:17:::0;-1:-1:-1;;;;;813:13:7::1;:32:::0;:::i:1;:::-;689:161:::0;;583:8941;;11845:234:6;11922:12;:15;;11962:47;;;;;;;;11922:15;;;;;:19;;;;11962:47;;;;-1:-1:-1;;;;;11962:47:6;;;;;;;;;;;-1:-1:-1;;11947:62:6;;;;;-1:-1:-1;;;;;;11947:62:6;;;;;;;;-1:-1:-1;12015:20:6;;;:16;:20;;;;;:59;;-1:-1:-1;;;;;;12015:59:6;;;;;;11845:234::o;1025:153:7:-;1194:5:12;;-1:-1:-1;;;;;1194:5:12;1180:10;:19;1172:54;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;1110:16:7::1;:63:::0;;-1:-1:-1;;;;;;1110:63:7::1;-1:-1:-1::0;;;;;1110:63:7;;;::::1;::::0;;;::::1;::::0;;1025:153::o;583:8941::-;;;;;;;",
  "deployedSourceMap": "583:8941:7:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;583:8941:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;10029:118:6;;;:::i;:::-;;;;-1:-1:-1;;;;;10029:118:6;;;;;;;;;;;;;;10404:129;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1625:136:7;;;:::i;:::-;;;;;;;;;;;;;;;;10643:129:6;;;:::i;10208:97::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8046:314:7;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8046:314:7;-1:-1:-1;;;;;8046:314:7;;:::i;:::-;;;;-1:-1:-1;;;;;8046:314:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4181:135;;;:::i;10864:143:6:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10864:143:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;806:254:12;;;:::i;:::-;;2280:143:7;;;:::i;179:20:12:-;;;:::i;8912:297:7:-;;;:::i;1025:153::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1025:153:7;-1:-1:-1;;;;;1025:153:7;;:::i;5629:280::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;5629:280:7;-1:-1:-1;;;;;5629:280:7;;:::i;11579:235:6:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;11579:235:6;-1:-1:-1;;;;;11579:235:6;;:::i;2899:154:7:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2899:154:7;;:::i;3568:161::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;3568:161:7;;:::i;635:49::-;;;:::i;604:66:6:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;604:66:6;;;;:::i;551:49::-;;;:::i;567:150:12:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;567:150:12;-1:-1:-1;;;;;567:150:12;;:::i;11165:147:6:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;11165:147:6;-1:-1:-1;;;;;11165:147:6;;:::i;7166:263:7:-;;;:::i;10029:118:6:-;10118:12;:23;;;;-1:-1:-1;;;;;10118:23:6;;10029:118::o;10404:129::-;10472:5;10494:12;:23;;;;;;;;;;-1:-1:-1;;;;;10494:23:6;-1:-1:-1;;;;;10494:32:6;;:34;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;10494:34:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10494:34:6;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;10494:34:6;;-1:-1:-1;10404:129:6;:::o;1625:136:7:-;9403:16;;1713:6;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;1736:20:::1;:18;:20::i;:::-;1729:27;;1625:136:::0;;:::o;10643:129:6:-;10710:7;10734:12;:23;;;;;;;;;;-1:-1:-1;;;;;10734:23:6;-1:-1:-1;;;;;10734:31:6;;:33;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;10208:97:6;10285:12;:15;;;10208:97;:::o;8046:314:7:-;9403:16;;8182:14;;;;;;;;;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;13009:18:6::1;::::0;-1:-1:-1;;;;;13009:18:6::1;12993:84;;;::::0;;-1:-1:-1;;;12993:84:6;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;;;;;;;;;12993:84:6;;;;;;;;;;;;;::::1;;8319:36:7::2;8346:8;8319:26;:36::i;:::-;8312:43:::0;;;;-1:-1:-1;8312:43:7;;-1:-1:-1;8312:43:7;-1:-1:-1;8312:43:7;;-1:-1:-1;8046:314:7;-1:-1:-1;;;8046:314:7:o;4181:135::-;9403:16;;4268:7;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;4292:19:::1;:17;:19::i;10864:143:6:-:0;10935:13;10965:12;:23;;;;;;;;;;-1:-1:-1;;;;;10965:23:6;-1:-1:-1;;;;;10965:35:6;;:37;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;10965:37:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10965:37:6;;;;;;39:16:-1;36:1;17:17;2:54;101:4;10965:37:6;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;15:2;7:11;;4:2;;;31:1;28;21:12;4:2;10965:37:6;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;372:25;;-1:-1;10965:37:6;;420:4:-1;411:14;;;;10965:37:6;;;;;411:14:-1;10965:37:6;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10965:37:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10958:44;;10864:143;:::o;806:254:12:-;876:12;;-1:-1:-1;;;;;876:12:12;862:10;:26;854:61;;;;;-1:-1:-1;;;854:61:12;;;;;;;;;;;;-1:-1:-1;;;854:61:12;;;;;;;;;;;;;;;922:16;941:5;;960:10;-1:-1:-1;;;;;;952:18:12;;;;;;;-1:-1:-1;976:25:12;;;;;;;1013:42;;-1:-1:-1;;;;;941:5:12;;;;960:10;;941:5;;1013:42;;;806:254;:::o;2280:143:7:-;9403:16;;2371:7;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;2395:23:::1;:21;:23::i;179:20:12:-:0;;;-1:-1:-1;;;;;179:20:12;;:::o;8912:297:7:-;9403:16;;9036:14;;;;;;;;;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;13009:18:6::1;::::0;-1:-1:-1;;;;;13009:18:6::1;12993:84;;;::::0;;-1:-1:-1;;;12993:84:6;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;;;;;;;;;12993:84:6;;;;;;;;;;;;;::::1;;9173:31:7::2;:29;:31::i;:::-;9166:38;;;;;;;;;;8912:297:::0;;;;;;:::o;1025:153::-;1194:5:12;;-1:-1:-1;;;;;1194:5:12;1180:10;:19;1172:54;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;;;;1110:16:7::1;:63:::0;;-1:-1:-1;;;;;;1110:63:7::1;-1:-1:-1::0;;;;;1110:63:7;;;::::1;::::0;;;::::1;::::0;;1025:153::o;5629:280::-;9403:16;;5739:14;;;;;;;;;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;5876:28:::1;5895:8;5876:18;:28::i;11579:235:6:-:0;1194:5:12;;-1:-1:-1;;;;;1194:5:12;1180:10;:19;1172:54;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;;;;11695:18:6::1;::::0;-1:-1:-1;;;;;11672:42:6;;::::1;11695:18:::0;::::1;11672:42;11664:82;;;::::0;;-1:-1:-1;;;11664:82:6;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;11759:18;11752:25:::0;;-1:-1:-1;;;;;;11752:25:6::1;::::0;;11783:26:::1;11797:11:::0;11783:13:::1;:26::i;:::-;11579:235:::0;:::o;2899:154:7:-;9403:16;;3000:6;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;3023:25:::1;3039:8;3023:15;:25::i;:::-;3016:32:::0;2899:154;-1:-1:-1;;;2899:154:7:o;3568:161::-;9403:16;;3672:7;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;3696:28:::1;3715:8;3696:18;:28::i;635:49::-:0;;;-1:-1:-1;;;;;635:49:7;;:::o;604:66:6:-;;;;;;;;;;;;-1:-1:-1;;;;;604:66:6;;:::o;551:49::-;;;-1:-1:-1;;;;;551:49:6;;:::o;567:150:12:-;1194:5;;-1:-1:-1;;;;;1194:5:12;1180:10;:19;1172:54;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;;;;644:12:::1;:18:::0;;-1:-1:-1;;;;;;644:18:12::1;-1:-1:-1::0;;;;;644:18:12;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;701:5:12;;674:38:::1;::::0;644:18;;701:5:::1;::::0;674:38:::1;::::0;-1:-1:-1;674:38:12::1;567:150:::0;:::o;11165:147:6:-;1194:5:12;;-1:-1:-1;;;;;1194:5:12;1180:10;:19;1172:54;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;-1:-1:-1;;;1172:54:12;;;;;;;;;;;;;;;11250:18:6::1;:57:::0;;-1:-1:-1;;;;;;11250:57:6::1;-1:-1:-1::0;;;;;11250:57:6;;;::::1;::::0;;;::::1;::::0;;11165:147::o;7166:263:7:-;9403:16;;7264:14;;;;;;;;;;-1:-1:-1;;;;;9403:16:7;9433:25;;;:63;;-1:-1:-1;9462:34:7;;;-1:-1:-1;;;9462:34:7;;9475:10;9462:34;;;;;;;;;;;;9487:8;9462:34;;;;;;-1:-1:-1;;;;;9462:12:7;;;;;9487:8;;9462:34;;;;9487:8;;;;9462:34;1:33:-1;99:1;81:16;;;74:27;9462:34:7;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;;-1:-1;9462:34:7;;-1:-1:-1;9462:34:7;;-1:-1:-1;;;9462:34:7;;;;-1:-1:-1;9462:34:7;;;;;2:2:-1;;;;27:1;24;17:12;2:2;9462:34:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9462:34:7;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9462:34:7;9433:63;9425:85;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;-1:-1:-1;;;9425:85:7;;;;;;;;;;;;;;;7401:23:::1;:21;:23::i;1304:155:6:-:0;1386:13;1416:12;:23;;;;;;;;;;-1:-1:-1;;;;;1416:23:6;-1:-1:-1;;;;;1416:36:6;;:38;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;8817:300:6;13009:18;;8934:14;;;;;;;;;;-1:-1:-1;;;;;13009:18:6;12993:84;;;;;-1:-1:-1;;;12993:84:6;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12993:84:6;;;;;;;;;;;;;;;9071:18:::1;::::0;:41:::1;::::0;;-1:-1:-1;;;9071:41:6;;-1:-1:-1;;;;;9071:41:6;::::1;;::::0;::::1;::::0;;;-1:-1:-1;;;;;9071:18:6;;::::1;::::0;:31:::1;::::0;:41;;;;;::::1;::::0;;;;;;;;;:18;:41;::::1;;2:2:-1::0;::::1;;;27:1;24::::0;17:12:::1;2:2;9071:41:6;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;9071:41:6;;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29::::0;22:12:::1;4:2;-1:-1:::0;9071:41:6;;::::1;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;-1:-1:-1;9071:41:6;-1:-1:-1;9071:41:6;;-1:-1:-1;9071:41:6;-1:-1:-1;8817:300:6;-1:-1:-1;;8817:300:6:o;4200:238::-;4281:15;4306:18;;:::i;:::-;-1:-1:-1;4306:33:6;;;;;;;;4327:12;4306:33;;;;;;;;;;;-1:-1:-1;;;;;4306:33:6;;;;;;;;4401:30;;-1:-1:-1;;;4401:30:6;;;;4306:33;;4375:58;;4401:28;;:30;;;;;4306:33;;4401:30;;;;;;4306:33;4401:30;;;2:2:-1;;;;27:1;24;17:12;2:2;4401:30:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4401:30:6;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4401:30:6;4375:8;:58::i;:::-;-1:-1:-1;;;;;4368:65:6;;;;4200:238;:::o;1847:165::-;1932:17;1966:12;:23;;;;;;;;;;-1:-1:-1;;;;;1966:23:6;-1:-1:-1;;;;;1966:39:6;;:41;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;9669:283:6;13009:18;;9774:14;;;;;;;;;;-1:-1:-1;;;;;13009:18:6;12993:84;;;;;-1:-1:-1;;;12993:84:6;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12993:84:6;;;;;;;;;;;;;;;9911:18:::1;;;;;;;;;-1:-1:-1::0;;;;;9911:18:6::1;-1:-1:-1::0;;;;;9911:34:6::1;;:36;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;9911:36:6;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;9911:36:6;;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29::::0;22:12:::1;4:2;-1:-1:::0;9911:36:6;;::::1;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;-1:-1:-1;9911:36:6;-1:-1:-1;9911:36:6;;-1:-1:-1;9911:36:6;-1:-1:-1;9669:283:6;-1:-1:-1;9669:283:6:o;5875:551::-;5979:14;6001:13;6022:17;6047;6072:22;6110:14;6126:24;6154:18;6163:8;-1:-1:-1;;;;;6154:18:6;:8;:18::i;:::-;6274:25;;;;;;;:16;:25;;;;;;;;;;:57;;-1:-1:-1;;;6274:57:6;;;;;;;;;;;;;;6109:63;;-1:-1:-1;6109:63:6;;-1:-1:-1;;;;;;6274:25:6;;:38;;:57;;;;;;;;;;;;;;;:25;:57;;;2:2:-1;;;;27:1;24;17:12;2:2;6274:57:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6274:57:6;;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;6274:57:6;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6274:57:6;;-1:-1:-1;6274:57:6;-1:-1:-1;6274:57:6;;-1:-1:-1;6274:57:6;-1:-1:-1;6345:76:6;6274:57;;;;;6413:7;6345:11;:76::i;:::-;6338:83;;;;-1:-1:-1;6338:83:6;;-1:-1:-1;6338:83:6;-1:-1:-1;6338:83:6;;-1:-1:-1;5875:551:6;-1:-1:-1;;;;5875:551:6:o;11845:234::-;11922:12;:15;;11962:47;;;;;;;;11922:15;;;;;:19;;;;11962:47;;;;-1:-1:-1;;;;;11962:47:6;;;;;;;;;;;-1:-1:-1;;11947:62:6;;;;;-1:-1:-1;;;;;;11947:62:6;;;;;;;;-1:-1:-1;12015:20:6;;;:16;:20;;;;;:59;;-1:-1:-1;;;;;;12015:59:6;;;;;;11845:234::o;2424:398::-;2519:13;-1:-1:-1;;;;;2546:17:6;;2542:31;;;-1:-1:-1;2572:1:6;2565:8;;2542:31;2581:14;2597:24;2625:18;2634:8;2625;:18::i;:::-;2686:25;;;2649:34;2686:25;;;:16;:25;;;;;;2580:63;;-1:-1:-1;2580:63:6;-1:-1:-1;;;;;;2686:25:6;2721:33;2717:47;;2763:1;2756:8;;;;;;;2717:47;2778:10;-1:-1:-1;;;;;2778:20:6;;2799:17;2778:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2778:39:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2778:39:6;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2778:39:6;;-1:-1:-1;;;;2424:398:6;;;;:::o;3273:408::-;3371:17;-1:-1:-1;;;;;3402:17:6;;3398:31;;;-1:-1:-1;3428:1:6;3421:8;;3398:31;3437:14;3453:24;3481:18;3490:8;3481;:18::i;:::-;3542:25;;;3505:34;3542:25;;;:16;:25;;;;;;3436:63;;-1:-1:-1;3436:63:6;-1:-1:-1;;;;;;3542:25:6;3577:33;3573:47;;3619:1;3612:8;;;;;;;3573:47;3634:10;-1:-1:-1;;;;;3634:23:6;;3658:17;3634:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;7684:516:6;7776:14;7798:13;7819:17;7844;7869:22;7906:20;;:::i;:::-;-1:-1:-1;7906:35:6;;;;;;;;7929:12;7906:35;;;;;;;;;-1:-1:-1;;;;;7906:35:6;;;;;;;8066:36;;-1:-1:-1;;;8066:36:6;;;;7906:35;;;;8066:34;;:36;;;;;;;;;;;;;;;7906:35;8066:36;;;2:2:-1;;;;27:1;24;17:12;2:2;8066:36:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8066:36:6;;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;8066:36:6;;;;;;;;;;;;;;;;;;;8184:10;;8066:36;;-1:-1:-1;8066:36:6;;-1:-1:-1;8066:36:6;-1:-1:-1;8066:36:6;;-1:-1:-1;8066:36:6;;-1:-1:-1;8116:79:6;;8066:36;;;;;;;;;;8116:11;:79::i;12083:181::-;12213:45;;715:2;12213:31;;;;;;:45;;12083:181::o;12268:248::-;715:2;12395:24;;;;12268:248::o;12520:413::-;12725:6;12733;12741:7;12750;12759:6;12790:34;12799:7;12815;12790:8;:34::i;:::-;12832:6;12846:9;12863;12880:42;12889:7;12905:15;12880:8;:42::i;:::-;12775:153;;;;-1:-1:-1;12775:153:6;;-1:-1:-1;12775:153:6;-1:-1:-1;12775:153:6;;-1:-1:-1;12520:413:6;-1:-1:-1;;;;;;;12520:413:6:o;583:8941:7:-;;;;;;;;;;-1:-1:-1;583:8941:7;;;;;;;;:::o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\nimport \"./AggregatorProxy.sol\";\nimport \"./interfaces/AccessControllerInterface.sol\";\n\n/**\n * @title External Access Controlled Aggregator Proxy\n * @notice A trusted proxy for updating where current answers are read from\n * @notice This contract provides a consistent address for the\n * Aggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is\n * trusted to update it.\n * @notice Only access enabled addresses are allowed to access getters for\n * aggregated answers and round information.\n */\ncontract EACAggregatorProxy is AggregatorProxy {\n\n  AccessControllerInterface public accessController;\n\n  constructor(\n    address _aggregator,\n    address _accessController\n  )\n    public\n    AggregatorProxy(_aggregator)\n  {\n    setController(_accessController);\n  }\n\n  /**\n   * @notice Allows the owner to update the accessController contract address.\n   * @param _accessController The new address for the accessController contract\n   */\n  function setController(address _accessController)\n    public\n    onlyOwner()\n  {\n    accessController = AccessControllerInterface(_accessController);\n  }\n\n  /**\n   * @notice Reads the current answer from aggregator delegated to.\n   * @dev overridden function to add the checkAccess() modifier\n   *\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended latestRoundData\n   * instead which includes better verification information.\n   */\n  function latestAnswer()\n    public\n    view\n    override\n    checkAccess()\n    returns (int256)\n  {\n    return super.latestAnswer();\n  }\n\n  /**\n   * @notice get the latest completed round where the answer was updated. This\n   * ID includes the proxy's phase, to make sure round IDs increase even when\n   * switching to a newly deployed aggregator.\n   *\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended latestRoundData\n   * instead which includes better verification information.\n   */\n  function latestTimestamp()\n    public\n    view\n    override\n    checkAccess()\n    returns (uint256)\n  {\n    return super.latestTimestamp();\n  }\n\n  /**\n   * @notice get past rounds answers\n   * @param _roundId the answer number to retrieve the answer for\n   * @dev overridden function to add the checkAccess() modifier\n   *\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended getRoundData\n   * instead which includes better verification information.\n   */\n  function getAnswer(uint256 _roundId)\n    public\n    view\n    override\n    checkAccess()\n    returns (int256)\n  {\n    return super.getAnswer(_roundId);\n  }\n\n  /**\n   * @notice get block timestamp when an answer was last updated\n   * @param _roundId the answer number to retrieve the updated timestamp for\n   * @dev overridden function to add the checkAccess() modifier\n   *\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended getRoundData\n   * instead which includes better verification information.\n   */\n  function getTimestamp(uint256 _roundId)\n    public\n    view\n    override\n    checkAccess()\n    returns (uint256)\n  {\n    return super.getTimestamp(_roundId);\n  }\n\n  /**\n   * @notice get the latest completed round where the answer was updated\n   * @dev overridden function to add the checkAccess() modifier\n   *\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended latestRoundData\n   * instead which includes better verification information.\n   */\n  function latestRound()\n    public\n    view\n    override\n    checkAccess()\n    returns (uint256)\n  {\n    return super.latestRound();\n  }\n\n  /**\n   * @notice get data about a round. Consumers are encouraged to check\n   * that they're receiving fresh data by inspecting the updatedAt and\n   * answeredInRound return values.\n   * Note that different underlying implementations of AggregatorV3Interface\n   * have slightly different semantics for some of the return values. Consumers\n   * should determine what implementations they expect to receive\n   * data from and validate that they can properly handle return data from all\n   * of them.\n   * @param _roundId the round ID to retrieve the round data for\n   * @return roundId is the round ID from the aggregator for which the data was\n   * retrieved combined with a phase to ensure that round IDs get larger as\n   * time moves forward.\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @dev Note that answer and updatedAt may change between queries.\n   */\n  function getRoundData(uint80 _roundId)\n    public\n    view\n    checkAccess()\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return super.getRoundData(_roundId);\n  }\n\n  /**\n   * @notice get data about the latest round. Consumers are encouraged to check\n   * that they're receiving fresh data by inspecting the updatedAt and\n   * answeredInRound return values.\n   * Note that different underlying implementations of AggregatorV3Interface\n   * have slightly different semantics for some of the return values. Consumers\n   * should determine what implementations they expect to receive\n   * data from and validate that they can properly handle return data from all\n   * of them.\n   * @return roundId is the round ID from the aggregator for which the data was\n   * retrieved combined with a phase to ensure that round IDs get larger as\n   * time moves forward.\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @dev Note that answer and updatedAt may change between queries.\n   */\n  function latestRoundData()\n    public\n    view\n    checkAccess()\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return super.latestRoundData();\n  }\n\n  /**\n   * @notice Used if an aggregator contract has been proposed.\n   * @param _roundId the round ID to retrieve the round data for\n   * @return roundId is the round ID for which data was retrieved\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n  */\n  function proposedGetRoundData(uint80 _roundId)\n    public\n    view\n    checkAccess()\n    hasProposal()\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return super.proposedGetRoundData(_roundId);\n  }\n\n  /**\n   * @notice Used if an aggregator contract has been proposed.\n   * @return roundId is the round ID for which data was retrieved\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n  */\n  function proposedLatestRoundData()\n    public\n    view\n    checkAccess()\n    hasProposal()\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return super.proposedLatestRoundData();\n  }\n\n  /**\n   * @dev reverts if the caller does not have access by the accessController\n   * contract or is the contract itself.\n   */\n  modifier checkAccess() {\n    AccessControllerInterface ac = accessController;\n    require(address(ac) == address(0) || ac.hasAccess(msg.sender, msg.data), \"No access\");\n    _;\n  }\n}\n",
  "sourcePath": "@chainlink/contracts/src/v0.6/EACAggregatorProxy.sol",
  "ast": {
    "absolutePath": "@chainlink/contracts/src/v0.6/EACAggregatorProxy.sol",
    "exportedSymbols": {
      "EACAggregatorProxy": [
        1034
      ]
    },
    "id": 1035,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 792,
        "literals": [
          "solidity",
          "0.6",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:7"
      },
      {
        "absolutePath": "@chainlink/contracts/src/v0.6/AggregatorProxy.sol",
        "file": "./AggregatorProxy.sol",
        "id": 793,
        "nodeType": "ImportDirective",
        "scope": 1035,
        "sourceUnit": 791,
        "src": "56:31:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@chainlink/contracts/src/v0.6/interfaces/AccessControllerInterface.sol",
        "file": "./interfaces/AccessControllerInterface.sol",
        "id": 794,
        "nodeType": "ImportDirective",
        "scope": 1035,
        "sourceUnit": 5863,
        "src": "88:52:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 796,
              "name": "AggregatorProxy",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 790,
              "src": "614:15:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AggregatorProxy_$790",
                "typeString": "contract AggregatorProxy"
              }
            },
            "id": 797,
            "nodeType": "InheritanceSpecifier",
            "src": "614:15:7"
          }
        ],
        "contractDependencies": [
          790,
          5009,
          5910,
          5919,
          5965
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 795,
          "nodeType": "StructuredDocumentation",
          "src": "142:440:7",
          "text": "@title External Access Controlled Aggregator Proxy\n@notice A trusted proxy for updating where current answers are read from\n@notice This contract provides a consistent address for the\nAggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is\ntrusted to update it.\n@notice Only access enabled addresses are allowed to access getters for\naggregated answers and round information."
        },
        "fullyImplemented": true,
        "id": 1034,
        "linearizedBaseContracts": [
          1034,
          790,
          5009,
          5919,
          5965,
          5910
        ],
        "name": "EACAggregatorProxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "bc43cbaf",
            "id": 799,
            "mutability": "mutable",
            "name": "accessController",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1034,
            "src": "635:49:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
              "typeString": "contract AccessControllerInterface"
            },
            "typeName": {
              "contractScope": null,
              "id": 798,
              "name": "AccessControllerInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5862,
              "src": "635:25:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                "typeString": "contract AccessControllerInterface"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 813,
              "nodeType": "Block",
              "src": "807:43:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 810,
                        "name": "_accessController",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 803,
                        "src": "827:17:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 809,
                      "name": "setController",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 829,
                      "src": "813:13:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 811,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "813:32:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 812,
                  "nodeType": "ExpressionStatement",
                  "src": "813:32:7"
                }
              ]
            },
            "documentation": null,
            "id": 814,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 806,
                    "name": "_aggregator",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 801,
                    "src": "792:11:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 807,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 805,
                  "name": "AggregatorProxy",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 790,
                  "src": "776:15:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_AggregatorProxy_$790_$",
                    "typeString": "type(contract AggregatorProxy)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "776:28:7"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 804,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 801,
                  "mutability": "mutable",
                  "name": "_aggregator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 814,
                  "src": "706:19:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 800,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "706:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 803,
                  "mutability": "mutable",
                  "name": "_accessController",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 814,
                  "src": "731:25:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 802,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "731:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "700:60:7"
            },
            "returnParameters": {
              "id": 808,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "807:0:7"
            },
            "scope": 1034,
            "src": "689:161:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 828,
              "nodeType": "Block",
              "src": "1104:74:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 826,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 822,
                      "name": "accessController",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 799,
                      "src": "1110:16:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                        "typeString": "contract AccessControllerInterface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 824,
                          "name": "_accessController",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 817,
                          "src": "1155:17:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 823,
                        "name": "AccessControllerInterface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5862,
                        "src": "1129:25:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_AccessControllerInterface_$5862_$",
                          "typeString": "type(contract AccessControllerInterface)"
                        }
                      },
                      "id": 825,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1129:44:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                        "typeString": "contract AccessControllerInterface"
                      }
                    },
                    "src": "1110:63:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                      "typeString": "contract AccessControllerInterface"
                    }
                  },
                  "id": 827,
                  "nodeType": "ExpressionStatement",
                  "src": "1110:63:7"
                }
              ]
            },
            "documentation": {
              "id": 815,
              "nodeType": "StructuredDocumentation",
              "src": "854:168:7",
              "text": "@notice Allows the owner to update the accessController contract address.\n@param _accessController The new address for the accessController contract"
            },
            "functionSelector": "92eefe9b",
            "id": 829,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 820,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 819,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 5008,
                  "src": "1090:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1090:11:7"
              }
            ],
            "name": "setController",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 818,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 817,
                  "mutability": "mutable",
                  "name": "_accessController",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 829,
                  "src": "1048:25:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 816,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1048:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1047:27:7"
            },
            "returnParameters": {
              "id": 821,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1104:0:7"
            },
            "scope": 1034,
            "src": "1025:153:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              275
            ],
            "body": {
              "id": 842,
              "nodeType": "Block",
              "src": "1723:38:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 838,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "1736:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 839,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestAnswer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 275,
                      "src": "1736:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_int256_$",
                        "typeString": "function () view returns (int256)"
                      }
                    },
                    "id": 840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1736:20:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "functionReturnParameters": 837,
                  "id": 841,
                  "nodeType": "Return",
                  "src": "1729:27:7"
                }
              ]
            },
            "documentation": {
              "id": 830,
              "nodeType": "StructuredDocumentation",
              "src": "1182:440:7",
              "text": "@notice Reads the current answer from aggregator delegated to.\n@dev overridden function to add the checkAccess() modifier\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended latestRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "50d25bcd",
            "id": 843,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 834,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 833,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "1686:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1686:13:7"
              }
            ],
            "name": "latestAnswer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 832,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1673:8:7"
            },
            "parameters": {
              "id": 831,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1646:2:7"
            },
            "returnParameters": {
              "id": 837,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 836,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 843,
                  "src": "1713:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 835,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1713:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1712:8:7"
            },
            "scope": 1034,
            "src": "1625:136:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              288
            ],
            "body": {
              "id": 856,
              "nodeType": "Block",
              "src": "2382:41:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 852,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2395:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 853,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestTimestamp",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 288,
                      "src": "2395:21:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 854,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2395:23:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 851,
                  "id": 855,
                  "nodeType": "Return",
                  "src": "2388:30:7"
                }
              ]
            },
            "documentation": {
              "id": 844,
              "nodeType": "StructuredDocumentation",
              "src": "1765:512:7",
              "text": "@notice get the latest completed round where the answer was updated. This\nID includes the proxy's phase, to make sure round IDs increase even when\nswitching to a newly deployed aggregator.\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended latestRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "8205bf6a",
            "id": 857,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 848,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 847,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "2344:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2344:13:7"
              }
            ],
            "name": "latestTimestamp",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 846,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2331:8:7"
            },
            "parameters": {
              "id": 845,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2304:2:7"
            },
            "returnParameters": {
              "id": 851,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 850,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 857,
                  "src": "2371:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 849,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2371:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2370:9:7"
            },
            "scope": 1034,
            "src": "2280:143:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              335
            ],
            "body": {
              "id": 873,
              "nodeType": "Block",
              "src": "3010:43:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 870,
                        "name": "_roundId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 860,
                        "src": "3039:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 868,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3023:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 869,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getAnswer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 335,
                      "src": "3023:15:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_int256_$",
                        "typeString": "function (uint256) view returns (int256)"
                      }
                    },
                    "id": 871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3023:25:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "functionReturnParameters": 867,
                  "id": 872,
                  "nodeType": "Return",
                  "src": "3016:32:7"
                }
              ]
            },
            "documentation": {
              "id": 858,
              "nodeType": "StructuredDocumentation",
              "src": "2427:469:7",
              "text": "@notice get past rounds answers\n@param _roundId the answer number to retrieve the answer for\n@dev overridden function to add the checkAccess() modifier\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended getRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "b5ab58dc",
            "id": 874,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 864,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 863,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "2973:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2973:13:7"
              }
            ],
            "name": "getAnswer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 862,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2960:8:7"
            },
            "parameters": {
              "id": 861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 860,
                  "mutability": "mutable",
                  "name": "_roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 874,
                  "src": "2918:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 859,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2918:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2917:18:7"
            },
            "returnParameters": {
              "id": 867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 866,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 874,
                  "src": "3000:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 865,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3000:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2999:8:7"
            },
            "scope": 1034,
            "src": "2899:154:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              382
            ],
            "body": {
              "id": 890,
              "nodeType": "Block",
              "src": "3683:46:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 887,
                        "name": "_roundId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 877,
                        "src": "3715:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 885,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3696:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 886,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getTimestamp",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 382,
                      "src": "3696:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 888,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3696:28:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 884,
                  "id": 889,
                  "nodeType": "Return",
                  "src": "3689:35:7"
                }
              ]
            },
            "documentation": {
              "id": 875,
              "nodeType": "StructuredDocumentation",
              "src": "3057:508:7",
              "text": "@notice get block timestamp when an answer was last updated\n@param _roundId the answer number to retrieve the updated timestamp for\n@dev overridden function to add the checkAccess() modifier\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended getRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "b633620c",
            "id": 891,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 881,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 880,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "3645:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3645:13:7"
              }
            ],
            "name": "getTimestamp",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 879,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3632:8:7"
            },
            "parameters": {
              "id": 878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 877,
                  "mutability": "mutable",
                  "name": "_roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 891,
                  "src": "3590:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 876,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3590:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3589:18:7"
            },
            "returnParameters": {
              "id": 884,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 883,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 891,
                  "src": "3672:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 882,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3672:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3671:9:7"
            },
            "scope": 1034,
            "src": "3568:161:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              406
            ],
            "body": {
              "id": 904,
              "nodeType": "Block",
              "src": "4279:37:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 900,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "4292:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 901,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestRound",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 406,
                      "src": "4292:17:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 902,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4292:19:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 899,
                  "id": 903,
                  "nodeType": "Return",
                  "src": "4285:26:7"
                }
              ]
            },
            "documentation": {
              "id": 892,
              "nodeType": "StructuredDocumentation",
              "src": "3733:445:7",
              "text": "@notice get the latest completed round where the answer was updated\n@dev overridden function to add the checkAccess() modifier\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended latestRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "668a0f02",
            "id": 905,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 896,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 895,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "4241:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "4241:13:7"
              }
            ],
            "name": "latestRound",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 894,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4228:8:7"
            },
            "parameters": {
              "id": 893,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4201:2:7"
            },
            "returnParameters": {
              "id": 899,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 898,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 905,
                  "src": "4268:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 897,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4268:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4267:9:7"
            },
            "scope": 1034,
            "src": "4181:135:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              455
            ],
            "body": {
              "id": 929,
              "nodeType": "Block",
              "src": "5863:46:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 926,
                        "name": "_roundId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 908,
                        "src": "5895:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 924,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "5876:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 925,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 455,
                      "src": "5876:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint80_$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function (uint80) view returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 927,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5876:28:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 923,
                  "id": 928,
                  "nodeType": "Return",
                  "src": "5869:35:7"
                }
              ]
            },
            "documentation": {
              "id": 906,
              "nodeType": "StructuredDocumentation",
              "src": "4320:1306:7",
              "text": "@notice get data about a round. Consumers are encouraged to check\nthat they're receiving fresh data by inspecting the updatedAt and\nansweredInRound return values.\nNote that different underlying implementations of AggregatorV3Interface\nhave slightly different semantics for some of the return values. Consumers\nshould determine what implementations they expect to receive\ndata from and validate that they can properly handle return data from all\nof them.\n@param _roundId the round ID to retrieve the round data for\n@return roundId is the round ID from the aggregator for which the data was\nretrieved combined with a phase to ensure that round IDs get larger as\ntime moves forward.\n@return answer is the answer for the given round\n@return startedAt is the timestamp when the round was started.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@return updatedAt is the timestamp when the round last was updated (i.e.\nanswer was last computed)\n@return answeredInRound is the round ID of the round in which the answer\nwas computed.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@dev Note that answer and updatedAt may change between queries."
            },
            "functionSelector": "9a6fc8f5",
            "id": 930,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 911,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 910,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "5692:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "5692:13:7"
              }
            ],
            "name": "getRoundData",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 912,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5710:8:7"
            },
            "parameters": {
              "id": 909,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 908,
                  "mutability": "mutable",
                  "name": "_roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5651:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 907,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "5651:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5650:17:7"
            },
            "returnParameters": {
              "id": 923,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 914,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5739:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 913,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "5739:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 916,
                  "mutability": "mutable",
                  "name": "answer",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5761:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 915,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5761:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 918,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5782:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 917,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5782:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 920,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5807:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 919,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5807:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 922,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5832:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 921,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "5832:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5731:129:7"
            },
            "scope": 1034,
            "src": "5629:280:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              497
            ],
            "body": {
              "id": 951,
              "nodeType": "Block",
              "src": "7388:41:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 947,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "7401:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 948,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 497,
                      "src": "7401:21:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function () view returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 949,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7401:23:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 946,
                  "id": 950,
                  "nodeType": "Return",
                  "src": "7394:30:7"
                }
              ]
            },
            "documentation": {
              "id": 931,
              "nodeType": "StructuredDocumentation",
              "src": "5913:1250:7",
              "text": "@notice get data about the latest round. Consumers are encouraged to check\nthat they're receiving fresh data by inspecting the updatedAt and\nansweredInRound return values.\nNote that different underlying implementations of AggregatorV3Interface\nhave slightly different semantics for some of the return values. Consumers\nshould determine what implementations they expect to receive\ndata from and validate that they can properly handle return data from all\nof them.\n@return roundId is the round ID from the aggregator for which the data was\nretrieved combined with a phase to ensure that round IDs get larger as\ntime moves forward.\n@return answer is the answer for the given round\n@return startedAt is the timestamp when the round was started.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@return updatedAt is the timestamp when the round last was updated (i.e.\nanswer was last computed)\n@return answeredInRound is the round ID of the round in which the answer\nwas computed.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@dev Note that answer and updatedAt may change between queries."
            },
            "functionSelector": "feaf968c",
            "id": 952,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 934,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 933,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "7217:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "7217:13:7"
              }
            ],
            "name": "latestRoundData",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 935,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7235:8:7"
            },
            "parameters": {
              "id": 932,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7190:2:7"
            },
            "returnParameters": {
              "id": 946,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 937,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7264:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 936,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "7264:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 939,
                  "mutability": "mutable",
                  "name": "answer",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7286:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 938,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7286:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 941,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7307:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 940,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7307:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 943,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7332:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 942,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7332:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 945,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7357:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 944,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "7357:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7256:129:7"
            },
            "scope": 1034,
            "src": "7166:263:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              521
            ],
            "body": {
              "id": 978,
              "nodeType": "Block",
              "src": "8306:54:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 975,
                        "name": "_roundId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 955,
                        "src": "8346:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 973,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "8319:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 974,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "proposedGetRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 521,
                      "src": "8319:26:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint80_$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function (uint80) view returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 976,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8319:36:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 972,
                  "id": 977,
                  "nodeType": "Return",
                  "src": "8312:43:7"
                }
              ]
            },
            "documentation": {
              "id": 953,
              "nodeType": "StructuredDocumentation",
              "src": "7433:610:7",
              "text": "@notice Used if an aggregator contract has been proposed.\n@param _roundId the round ID to retrieve the round data for\n@return roundId is the round ID for which data was retrieved\n@return answer is the answer for the given round\n@return startedAt is the timestamp when the round was started.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@return updatedAt is the timestamp when the round last was updated (i.e.\nanswer was last computed)\n@return answeredInRound is the round ID of the round in which the answer\nwas computed."
            },
            "functionSelector": "6001ac53",
            "id": 979,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 958,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 957,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "8117:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "8117:13:7"
              },
              {
                "arguments": [],
                "id": 960,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 959,
                  "name": "hasProposal",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 789,
                  "src": "8135:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "8135:13:7"
              }
            ],
            "name": "proposedGetRoundData",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 961,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8153:8:7"
            },
            "parameters": {
              "id": 956,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 955,
                  "mutability": "mutable",
                  "name": "_roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8076:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 954,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "8076:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8075:17:7"
            },
            "returnParameters": {
              "id": 972,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 963,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8182:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 962,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "8182:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 965,
                  "mutability": "mutable",
                  "name": "answer",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8204:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 964,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8204:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 967,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8225:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 966,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8225:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 969,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8250:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 968,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8250:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 971,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8275:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 970,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "8275:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8174:129:7"
            },
            "scope": 1034,
            "src": "8046:314:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              542
            ],
            "body": {
              "id": 1002,
              "nodeType": "Block",
              "src": "9160:49:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 998,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "9173:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 999,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "proposedLatestRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 542,
                      "src": "9173:29:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function () view returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 1000,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9173:31:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 997,
                  "id": 1001,
                  "nodeType": "Return",
                  "src": "9166:38:7"
                }
              ]
            },
            "documentation": {
              "id": 980,
              "nodeType": "StructuredDocumentation",
              "src": "8364:545:7",
              "text": "@notice Used if an aggregator contract has been proposed.\n@return roundId is the round ID for which data was retrieved\n@return answer is the answer for the given round\n@return startedAt is the timestamp when the round was started.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@return updatedAt is the timestamp when the round last was updated (i.e.\nanswer was last computed)\n@return answeredInRound is the round ID of the round in which the answer\nwas computed."
            },
            "functionSelector": "8f6b4d91",
            "id": 1003,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 983,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 982,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "8971:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "8971:13:7"
              },
              {
                "arguments": [],
                "id": 985,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 984,
                  "name": "hasProposal",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 789,
                  "src": "8989:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "8989:13:7"
              }
            ],
            "name": "proposedLatestRoundData",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 986,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9007:8:7"
            },
            "parameters": {
              "id": 981,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8944:2:7"
            },
            "returnParameters": {
              "id": 997,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 988,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9036:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 987,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "9036:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 990,
                  "mutability": "mutable",
                  "name": "answer",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9058:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 989,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9058:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 992,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9079:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 991,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9079:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 994,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9104:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 993,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9104:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 996,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9129:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 995,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "9129:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9028:129:7"
            },
            "scope": 1034,
            "src": "8912:297:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1032,
              "nodeType": "Block",
              "src": "9366:156:7",
              "statements": [
                {
                  "assignments": [
                    1007
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1007,
                      "mutability": "mutable",
                      "name": "ac",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1032,
                      "src": "9372:28:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                        "typeString": "contract AccessControllerInterface"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 1006,
                        "name": "AccessControllerInterface",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 5862,
                        "src": "9372:25:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                          "typeString": "contract AccessControllerInterface"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1009,
                  "initialValue": {
                    "argumentTypes": null,
                    "id": 1008,
                    "name": "accessController",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 799,
                    "src": "9403:16:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                      "typeString": "contract AccessControllerInterface"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9372:47:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1027,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1019,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1013,
                                "name": "ac",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1007,
                                "src": "9441:2:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                                  "typeString": "contract AccessControllerInterface"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                                  "typeString": "contract AccessControllerInterface"
                                }
                              ],
                              "id": 1012,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9433:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1011,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9433:7:7",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 1014,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9433:11:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1017,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9456:1:7",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1016,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9448:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1015,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9448:7:7",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 1018,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9448:10:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "9433:25:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1022,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9475:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1023,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "9475:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1024,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9487:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1025,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "data",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "9487:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1020,
                              "name": "ac",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1007,
                              "src": "9462:2:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                                "typeString": "contract AccessControllerInterface"
                              }
                            },
                            "id": 1021,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "hasAccess",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5861,
                            "src": "9462:12:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                              "typeString": "function (address,bytes memory) view external returns (bool)"
                            }
                          },
                          "id": 1026,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9462:34:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "9433:63:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e6f20616363657373",
                        "id": 1028,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9498:11:7",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_87589d3e364d25220f4fcbb8f43a8d72cb8377e2d18fa62010b1c9b009ed9815",
                          "typeString": "literal_string \"No access\""
                        },
                        "value": "No access"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_87589d3e364d25220f4fcbb8f43a8d72cb8377e2d18fa62010b1c9b009ed9815",
                          "typeString": "literal_string \"No access\""
                        }
                      ],
                      "id": 1010,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9425:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1029,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9425:85:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1030,
                  "nodeType": "ExpressionStatement",
                  "src": "9425:85:7"
                },
                {
                  "id": 1031,
                  "nodeType": "PlaceholderStatement",
                  "src": "9516:1:7"
                }
              ]
            },
            "documentation": {
              "id": 1004,
              "nodeType": "StructuredDocumentation",
              "src": "9213:127:7",
              "text": "@dev reverts if the caller does not have access by the accessController\ncontract or is the contract itself."
            },
            "id": 1033,
            "name": "checkAccess",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 1005,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9363:2:7"
            },
            "src": "9343:179:7",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1035,
        "src": "583:8941:7"
      }
    ],
    "src": "32:9493:7"
  },
  "legacyAST": {
    "absolutePath": "@chainlink/contracts/src/v0.6/EACAggregatorProxy.sol",
    "exportedSymbols": {
      "EACAggregatorProxy": [
        1034
      ]
    },
    "id": 1035,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 792,
        "literals": [
          "solidity",
          "0.6",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:7"
      },
      {
        "absolutePath": "@chainlink/contracts/src/v0.6/AggregatorProxy.sol",
        "file": "./AggregatorProxy.sol",
        "id": 793,
        "nodeType": "ImportDirective",
        "scope": 1035,
        "sourceUnit": 791,
        "src": "56:31:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@chainlink/contracts/src/v0.6/interfaces/AccessControllerInterface.sol",
        "file": "./interfaces/AccessControllerInterface.sol",
        "id": 794,
        "nodeType": "ImportDirective",
        "scope": 1035,
        "sourceUnit": 5863,
        "src": "88:52:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 796,
              "name": "AggregatorProxy",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 790,
              "src": "614:15:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AggregatorProxy_$790",
                "typeString": "contract AggregatorProxy"
              }
            },
            "id": 797,
            "nodeType": "InheritanceSpecifier",
            "src": "614:15:7"
          }
        ],
        "contractDependencies": [
          790,
          5009,
          5910,
          5919,
          5965
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 795,
          "nodeType": "StructuredDocumentation",
          "src": "142:440:7",
          "text": "@title External Access Controlled Aggregator Proxy\n@notice A trusted proxy for updating where current answers are read from\n@notice This contract provides a consistent address for the\nAggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is\ntrusted to update it.\n@notice Only access enabled addresses are allowed to access getters for\naggregated answers and round information."
        },
        "fullyImplemented": true,
        "id": 1034,
        "linearizedBaseContracts": [
          1034,
          790,
          5009,
          5919,
          5965,
          5910
        ],
        "name": "EACAggregatorProxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "bc43cbaf",
            "id": 799,
            "mutability": "mutable",
            "name": "accessController",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1034,
            "src": "635:49:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
              "typeString": "contract AccessControllerInterface"
            },
            "typeName": {
              "contractScope": null,
              "id": 798,
              "name": "AccessControllerInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5862,
              "src": "635:25:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                "typeString": "contract AccessControllerInterface"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 813,
              "nodeType": "Block",
              "src": "807:43:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 810,
                        "name": "_accessController",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 803,
                        "src": "827:17:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 809,
                      "name": "setController",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 829,
                      "src": "813:13:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 811,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "813:32:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 812,
                  "nodeType": "ExpressionStatement",
                  "src": "813:32:7"
                }
              ]
            },
            "documentation": null,
            "id": 814,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 806,
                    "name": "_aggregator",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 801,
                    "src": "792:11:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 807,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 805,
                  "name": "AggregatorProxy",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 790,
                  "src": "776:15:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_AggregatorProxy_$790_$",
                    "typeString": "type(contract AggregatorProxy)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "776:28:7"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 804,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 801,
                  "mutability": "mutable",
                  "name": "_aggregator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 814,
                  "src": "706:19:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 800,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "706:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 803,
                  "mutability": "mutable",
                  "name": "_accessController",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 814,
                  "src": "731:25:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 802,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "731:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "700:60:7"
            },
            "returnParameters": {
              "id": 808,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "807:0:7"
            },
            "scope": 1034,
            "src": "689:161:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 828,
              "nodeType": "Block",
              "src": "1104:74:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 826,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 822,
                      "name": "accessController",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 799,
                      "src": "1110:16:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                        "typeString": "contract AccessControllerInterface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 824,
                          "name": "_accessController",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 817,
                          "src": "1155:17:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 823,
                        "name": "AccessControllerInterface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5862,
                        "src": "1129:25:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_AccessControllerInterface_$5862_$",
                          "typeString": "type(contract AccessControllerInterface)"
                        }
                      },
                      "id": 825,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1129:44:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                        "typeString": "contract AccessControllerInterface"
                      }
                    },
                    "src": "1110:63:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                      "typeString": "contract AccessControllerInterface"
                    }
                  },
                  "id": 827,
                  "nodeType": "ExpressionStatement",
                  "src": "1110:63:7"
                }
              ]
            },
            "documentation": {
              "id": 815,
              "nodeType": "StructuredDocumentation",
              "src": "854:168:7",
              "text": "@notice Allows the owner to update the accessController contract address.\n@param _accessController The new address for the accessController contract"
            },
            "functionSelector": "92eefe9b",
            "id": 829,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 820,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 819,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 5008,
                  "src": "1090:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1090:11:7"
              }
            ],
            "name": "setController",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 818,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 817,
                  "mutability": "mutable",
                  "name": "_accessController",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 829,
                  "src": "1048:25:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 816,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1048:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1047:27:7"
            },
            "returnParameters": {
              "id": 821,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1104:0:7"
            },
            "scope": 1034,
            "src": "1025:153:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              275
            ],
            "body": {
              "id": 842,
              "nodeType": "Block",
              "src": "1723:38:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 838,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "1736:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 839,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestAnswer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 275,
                      "src": "1736:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_int256_$",
                        "typeString": "function () view returns (int256)"
                      }
                    },
                    "id": 840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1736:20:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "functionReturnParameters": 837,
                  "id": 841,
                  "nodeType": "Return",
                  "src": "1729:27:7"
                }
              ]
            },
            "documentation": {
              "id": 830,
              "nodeType": "StructuredDocumentation",
              "src": "1182:440:7",
              "text": "@notice Reads the current answer from aggregator delegated to.\n@dev overridden function to add the checkAccess() modifier\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended latestRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "50d25bcd",
            "id": 843,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 834,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 833,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "1686:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1686:13:7"
              }
            ],
            "name": "latestAnswer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 832,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1673:8:7"
            },
            "parameters": {
              "id": 831,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1646:2:7"
            },
            "returnParameters": {
              "id": 837,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 836,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 843,
                  "src": "1713:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 835,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1713:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1712:8:7"
            },
            "scope": 1034,
            "src": "1625:136:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              288
            ],
            "body": {
              "id": 856,
              "nodeType": "Block",
              "src": "2382:41:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 852,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2395:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 853,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestTimestamp",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 288,
                      "src": "2395:21:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 854,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2395:23:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 851,
                  "id": 855,
                  "nodeType": "Return",
                  "src": "2388:30:7"
                }
              ]
            },
            "documentation": {
              "id": 844,
              "nodeType": "StructuredDocumentation",
              "src": "1765:512:7",
              "text": "@notice get the latest completed round where the answer was updated. This\nID includes the proxy's phase, to make sure round IDs increase even when\nswitching to a newly deployed aggregator.\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended latestRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "8205bf6a",
            "id": 857,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 848,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 847,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "2344:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2344:13:7"
              }
            ],
            "name": "latestTimestamp",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 846,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2331:8:7"
            },
            "parameters": {
              "id": 845,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2304:2:7"
            },
            "returnParameters": {
              "id": 851,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 850,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 857,
                  "src": "2371:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 849,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2371:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2370:9:7"
            },
            "scope": 1034,
            "src": "2280:143:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              335
            ],
            "body": {
              "id": 873,
              "nodeType": "Block",
              "src": "3010:43:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 870,
                        "name": "_roundId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 860,
                        "src": "3039:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 868,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3023:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 869,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getAnswer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 335,
                      "src": "3023:15:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_int256_$",
                        "typeString": "function (uint256) view returns (int256)"
                      }
                    },
                    "id": 871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3023:25:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "functionReturnParameters": 867,
                  "id": 872,
                  "nodeType": "Return",
                  "src": "3016:32:7"
                }
              ]
            },
            "documentation": {
              "id": 858,
              "nodeType": "StructuredDocumentation",
              "src": "2427:469:7",
              "text": "@notice get past rounds answers\n@param _roundId the answer number to retrieve the answer for\n@dev overridden function to add the checkAccess() modifier\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended getRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "b5ab58dc",
            "id": 874,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 864,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 863,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "2973:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2973:13:7"
              }
            ],
            "name": "getAnswer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 862,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2960:8:7"
            },
            "parameters": {
              "id": 861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 860,
                  "mutability": "mutable",
                  "name": "_roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 874,
                  "src": "2918:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 859,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2918:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2917:18:7"
            },
            "returnParameters": {
              "id": 867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 866,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 874,
                  "src": "3000:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 865,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3000:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2999:8:7"
            },
            "scope": 1034,
            "src": "2899:154:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              382
            ],
            "body": {
              "id": 890,
              "nodeType": "Block",
              "src": "3683:46:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 887,
                        "name": "_roundId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 877,
                        "src": "3715:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 885,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3696:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 886,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getTimestamp",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 382,
                      "src": "3696:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 888,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3696:28:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 884,
                  "id": 889,
                  "nodeType": "Return",
                  "src": "3689:35:7"
                }
              ]
            },
            "documentation": {
              "id": 875,
              "nodeType": "StructuredDocumentation",
              "src": "3057:508:7",
              "text": "@notice get block timestamp when an answer was last updated\n@param _roundId the answer number to retrieve the updated timestamp for\n@dev overridden function to add the checkAccess() modifier\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended getRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "b633620c",
            "id": 891,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 881,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 880,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "3645:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3645:13:7"
              }
            ],
            "name": "getTimestamp",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 879,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3632:8:7"
            },
            "parameters": {
              "id": 878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 877,
                  "mutability": "mutable",
                  "name": "_roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 891,
                  "src": "3590:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 876,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3590:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3589:18:7"
            },
            "returnParameters": {
              "id": 884,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 883,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 891,
                  "src": "3672:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 882,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3672:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3671:9:7"
            },
            "scope": 1034,
            "src": "3568:161:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              406
            ],
            "body": {
              "id": 904,
              "nodeType": "Block",
              "src": "4279:37:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 900,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "4292:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 901,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestRound",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 406,
                      "src": "4292:17:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 902,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4292:19:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 899,
                  "id": 903,
                  "nodeType": "Return",
                  "src": "4285:26:7"
                }
              ]
            },
            "documentation": {
              "id": 892,
              "nodeType": "StructuredDocumentation",
              "src": "3733:445:7",
              "text": "@notice get the latest completed round where the answer was updated\n@dev overridden function to add the checkAccess() modifier\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\nanswer has been reached, it will simply return 0. Either wait to point to\nan already answered Aggregator or use the recommended latestRoundData\ninstead which includes better verification information."
            },
            "functionSelector": "668a0f02",
            "id": 905,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 896,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 895,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "4241:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "4241:13:7"
              }
            ],
            "name": "latestRound",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 894,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4228:8:7"
            },
            "parameters": {
              "id": 893,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4201:2:7"
            },
            "returnParameters": {
              "id": 899,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 898,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 905,
                  "src": "4268:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 897,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4268:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4267:9:7"
            },
            "scope": 1034,
            "src": "4181:135:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              455
            ],
            "body": {
              "id": 929,
              "nodeType": "Block",
              "src": "5863:46:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 926,
                        "name": "_roundId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 908,
                        "src": "5895:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 924,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "5876:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 925,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 455,
                      "src": "5876:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint80_$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function (uint80) view returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 927,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5876:28:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 923,
                  "id": 928,
                  "nodeType": "Return",
                  "src": "5869:35:7"
                }
              ]
            },
            "documentation": {
              "id": 906,
              "nodeType": "StructuredDocumentation",
              "src": "4320:1306:7",
              "text": "@notice get data about a round. Consumers are encouraged to check\nthat they're receiving fresh data by inspecting the updatedAt and\nansweredInRound return values.\nNote that different underlying implementations of AggregatorV3Interface\nhave slightly different semantics for some of the return values. Consumers\nshould determine what implementations they expect to receive\ndata from and validate that they can properly handle return data from all\nof them.\n@param _roundId the round ID to retrieve the round data for\n@return roundId is the round ID from the aggregator for which the data was\nretrieved combined with a phase to ensure that round IDs get larger as\ntime moves forward.\n@return answer is the answer for the given round\n@return startedAt is the timestamp when the round was started.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@return updatedAt is the timestamp when the round last was updated (i.e.\nanswer was last computed)\n@return answeredInRound is the round ID of the round in which the answer\nwas computed.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@dev Note that answer and updatedAt may change between queries."
            },
            "functionSelector": "9a6fc8f5",
            "id": 930,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 911,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 910,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "5692:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "5692:13:7"
              }
            ],
            "name": "getRoundData",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 912,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5710:8:7"
            },
            "parameters": {
              "id": 909,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 908,
                  "mutability": "mutable",
                  "name": "_roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5651:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 907,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "5651:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5650:17:7"
            },
            "returnParameters": {
              "id": 923,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 914,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5739:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 913,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "5739:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 916,
                  "mutability": "mutable",
                  "name": "answer",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5761:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 915,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5761:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 918,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5782:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 917,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5782:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 920,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5807:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 919,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5807:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 922,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 930,
                  "src": "5832:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 921,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "5832:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5731:129:7"
            },
            "scope": 1034,
            "src": "5629:280:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              497
            ],
            "body": {
              "id": 951,
              "nodeType": "Block",
              "src": "7388:41:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 947,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "7401:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 948,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 497,
                      "src": "7401:21:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function () view returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 949,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7401:23:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 946,
                  "id": 950,
                  "nodeType": "Return",
                  "src": "7394:30:7"
                }
              ]
            },
            "documentation": {
              "id": 931,
              "nodeType": "StructuredDocumentation",
              "src": "5913:1250:7",
              "text": "@notice get data about the latest round. Consumers are encouraged to check\nthat they're receiving fresh data by inspecting the updatedAt and\nansweredInRound return values.\nNote that different underlying implementations of AggregatorV3Interface\nhave slightly different semantics for some of the return values. Consumers\nshould determine what implementations they expect to receive\ndata from and validate that they can properly handle return data from all\nof them.\n@return roundId is the round ID from the aggregator for which the data was\nretrieved combined with a phase to ensure that round IDs get larger as\ntime moves forward.\n@return answer is the answer for the given round\n@return startedAt is the timestamp when the round was started.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@return updatedAt is the timestamp when the round last was updated (i.e.\nanswer was last computed)\n@return answeredInRound is the round ID of the round in which the answer\nwas computed.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@dev Note that answer and updatedAt may change between queries."
            },
            "functionSelector": "feaf968c",
            "id": 952,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 934,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 933,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "7217:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "7217:13:7"
              }
            ],
            "name": "latestRoundData",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 935,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7235:8:7"
            },
            "parameters": {
              "id": 932,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7190:2:7"
            },
            "returnParameters": {
              "id": 946,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 937,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7264:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 936,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "7264:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 939,
                  "mutability": "mutable",
                  "name": "answer",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7286:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 938,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7286:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 941,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7307:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 940,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7307:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 943,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7332:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 942,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7332:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 945,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 952,
                  "src": "7357:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 944,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "7357:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7256:129:7"
            },
            "scope": 1034,
            "src": "7166:263:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              521
            ],
            "body": {
              "id": 978,
              "nodeType": "Block",
              "src": "8306:54:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 975,
                        "name": "_roundId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 955,
                        "src": "8346:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 973,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "8319:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 974,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "proposedGetRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 521,
                      "src": "8319:26:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint80_$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function (uint80) view returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 976,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8319:36:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 972,
                  "id": 977,
                  "nodeType": "Return",
                  "src": "8312:43:7"
                }
              ]
            },
            "documentation": {
              "id": 953,
              "nodeType": "StructuredDocumentation",
              "src": "7433:610:7",
              "text": "@notice Used if an aggregator contract has been proposed.\n@param _roundId the round ID to retrieve the round data for\n@return roundId is the round ID for which data was retrieved\n@return answer is the answer for the given round\n@return startedAt is the timestamp when the round was started.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@return updatedAt is the timestamp when the round last was updated (i.e.\nanswer was last computed)\n@return answeredInRound is the round ID of the round in which the answer\nwas computed."
            },
            "functionSelector": "6001ac53",
            "id": 979,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 958,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 957,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "8117:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "8117:13:7"
              },
              {
                "arguments": [],
                "id": 960,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 959,
                  "name": "hasProposal",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 789,
                  "src": "8135:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "8135:13:7"
              }
            ],
            "name": "proposedGetRoundData",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 961,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8153:8:7"
            },
            "parameters": {
              "id": 956,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 955,
                  "mutability": "mutable",
                  "name": "_roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8076:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 954,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "8076:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8075:17:7"
            },
            "returnParameters": {
              "id": 972,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 963,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8182:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 962,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "8182:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 965,
                  "mutability": "mutable",
                  "name": "answer",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8204:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 964,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8204:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 967,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8225:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 966,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8225:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 969,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8250:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 968,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8250:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 971,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 979,
                  "src": "8275:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 970,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "8275:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8174:129:7"
            },
            "scope": 1034,
            "src": "8046:314:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              542
            ],
            "body": {
              "id": 1002,
              "nodeType": "Block",
              "src": "9160:49:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 998,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "9173:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_EACAggregatorProxy_$1034",
                          "typeString": "contract super EACAggregatorProxy"
                        }
                      },
                      "id": 999,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "proposedLatestRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 542,
                      "src": "9173:29:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function () view returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 1000,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9173:31:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 997,
                  "id": 1001,
                  "nodeType": "Return",
                  "src": "9166:38:7"
                }
              ]
            },
            "documentation": {
              "id": 980,
              "nodeType": "StructuredDocumentation",
              "src": "8364:545:7",
              "text": "@notice Used if an aggregator contract has been proposed.\n@return roundId is the round ID for which data was retrieved\n@return answer is the answer for the given round\n@return startedAt is the timestamp when the round was started.\n(Only some AggregatorV3Interface implementations return meaningful values)\n@return updatedAt is the timestamp when the round last was updated (i.e.\nanswer was last computed)\n@return answeredInRound is the round ID of the round in which the answer\nwas computed."
            },
            "functionSelector": "8f6b4d91",
            "id": 1003,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 983,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 982,
                  "name": "checkAccess",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1033,
                  "src": "8971:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "8971:13:7"
              },
              {
                "arguments": [],
                "id": 985,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 984,
                  "name": "hasProposal",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 789,
                  "src": "8989:11:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "8989:13:7"
              }
            ],
            "name": "proposedLatestRoundData",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 986,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9007:8:7"
            },
            "parameters": {
              "id": 981,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8944:2:7"
            },
            "returnParameters": {
              "id": 997,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 988,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9036:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 987,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "9036:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 990,
                  "mutability": "mutable",
                  "name": "answer",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9058:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 989,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9058:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 992,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9079:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 991,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9079:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 994,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9104:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 993,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9104:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 996,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1003,
                  "src": "9129:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 995,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "9129:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9028:129:7"
            },
            "scope": 1034,
            "src": "8912:297:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1032,
              "nodeType": "Block",
              "src": "9366:156:7",
              "statements": [
                {
                  "assignments": [
                    1007
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1007,
                      "mutability": "mutable",
                      "name": "ac",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1032,
                      "src": "9372:28:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                        "typeString": "contract AccessControllerInterface"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 1006,
                        "name": "AccessControllerInterface",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 5862,
                        "src": "9372:25:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                          "typeString": "contract AccessControllerInterface"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1009,
                  "initialValue": {
                    "argumentTypes": null,
                    "id": 1008,
                    "name": "accessController",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 799,
                    "src": "9403:16:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                      "typeString": "contract AccessControllerInterface"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9372:47:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1027,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1019,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1013,
                                "name": "ac",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1007,
                                "src": "9441:2:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                                  "typeString": "contract AccessControllerInterface"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                                  "typeString": "contract AccessControllerInterface"
                                }
                              ],
                              "id": 1012,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9433:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1011,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9433:7:7",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 1014,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9433:11:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1017,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9456:1:7",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1016,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9448:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1015,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9448:7:7",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 1018,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9448:10:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "9433:25:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1022,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9475:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1023,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "9475:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1024,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9487:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1025,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "data",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "9487:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1020,
                              "name": "ac",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1007,
                              "src": "9462:2:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AccessControllerInterface_$5862",
                                "typeString": "contract AccessControllerInterface"
                              }
                            },
                            "id": 1021,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "hasAccess",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5861,
                            "src": "9462:12:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                              "typeString": "function (address,bytes memory) view external returns (bool)"
                            }
                          },
                          "id": 1026,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9462:34:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "9433:63:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e6f20616363657373",
                        "id": 1028,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9498:11:7",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_87589d3e364d25220f4fcbb8f43a8d72cb8377e2d18fa62010b1c9b009ed9815",
                          "typeString": "literal_string \"No access\""
                        },
                        "value": "No access"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_87589d3e364d25220f4fcbb8f43a8d72cb8377e2d18fa62010b1c9b009ed9815",
                          "typeString": "literal_string \"No access\""
                        }
                      ],
                      "id": 1010,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9425:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1029,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9425:85:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1030,
                  "nodeType": "ExpressionStatement",
                  "src": "9425:85:7"
                },
                {
                  "id": 1031,
                  "nodeType": "PlaceholderStatement",
                  "src": "9516:1:7"
                }
              ]
            },
            "documentation": {
              "id": 1004,
              "nodeType": "StructuredDocumentation",
              "src": "9213:127:7",
              "text": "@dev reverts if the caller does not have access by the accessController\ncontract or is the contract itself."
            },
            "id": 1033,
            "name": "checkAccess",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 1005,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9363:2:7"
            },
            "src": "9343:179:7",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1035,
        "src": "583:8941:7"
      }
    ],
    "src": "32:9493:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.6+commit.6c089d02.Emscripten.clang"
  },
  "networks": {
    "2": {
      "events": {
        "0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "int256",
              "name": "current",
              "type": "int256"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "updatedAt",
              "type": "uint256"
            }
          ],
          "name": "AnswerUpdated",
          "type": "event"
        },
        "0x0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac60271": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "startedBy",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            }
          ],
          "name": "NewRound",
          "type": "event"
        },
        "0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferRequested",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xbE0B1f12fB1b98622409C6708B932BA0f9Ed5524",
      "transactionHash": "0x3fc16144eeda0715e5ddab4bfcfbfabbf5012aad16e17932c66b7dc51192e919"
    },
    "42": {
      "events": {
        "0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "int256",
              "name": "current",
              "type": "int256"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "updatedAt",
              "type": "uint256"
            }
          ],
          "name": "AnswerUpdated",
          "type": "event"
        },
        "0x0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac60271": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "roundId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "startedBy",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            }
          ],
          "name": "NewRound",
          "type": "event"
        },
        "0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferRequested",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xb8bfAb0F0B2d78e39732E2e59b1485Cba16Ec503",
      "transactionHash": "0xd75e50637a059c84ef6760cc2d8256ba013af8042aa8ad8279b526106e8e4f0e"
    }
  },
  "schemaVersion": "3.3.2",
  "updatedAt": "2021-02-11T21:51:43.943Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "acceptOwnership()": {
        "details": "Allows an ownership transfer to be completed by the recipient."
      },
      "confirmAggregator(address)": {
        "details": "Reverts if the given address doesn't match what was previously proposed",
        "params": {
          "_aggregator": "The new address for the aggregator contract"
        }
      },
      "getAnswer(uint256)": {
        "details": "overridden function to add the checkAccess() modifier#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
        "params": {
          "_roundId": "the answer number to retrieve the answer for"
        }
      },
      "getRoundData(uint80)": {
        "details": "Note that answer and updatedAt may change between queries.",
        "params": {
          "_roundId": "the round ID to retrieve the round data for"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
          "roundId": "is the round ID from the aggregator for which the data was retrieved combined with a phase to ensure that round IDs get larger as time moves forward.",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "getTimestamp(uint256)": {
        "details": "overridden function to add the checkAccess() modifier#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
        "params": {
          "_roundId": "the answer number to retrieve the updated timestamp for"
        }
      },
      "latestAnswer()": {
        "details": "overridden function to add the checkAccess() modifier#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "latestRound()": {
        "details": "overridden function to add the checkAccess() modifier#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "latestRoundData()": {
        "details": "Note that answer and updatedAt may change between queries.",
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
          "roundId": "is the round ID from the aggregator for which the data was retrieved combined with a phase to ensure that round IDs get larger as time moves forward.",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "latestTimestamp()": {
        "details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "proposeAggregator(address)": {
        "params": {
          "_aggregator": "The new address for the aggregator contract"
        }
      },
      "proposedGetRoundData(uint80)": {
        "params": {
          "_roundId": "the round ID to retrieve the round data for"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed.",
          "roundId": "is the round ID for which data was retrieved",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "setController(address)": {
        "params": {
          "_accessController": "The new address for the accessController contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "title": "External Access Controlled Aggregator Proxy"
  },
  "userdoc": {
    "methods": {
      "aggregator()": {
        "notice": "returns the current phase's aggregator address."
      },
      "confirmAggregator(address)": {
        "notice": "Allows the owner to confirm and change the address to the proposed aggregator"
      },
      "decimals()": {
        "notice": "represents the number of decimals the aggregator responses represent."
      },
      "description()": {
        "notice": "returns the description of the aggregator the proxy points to."
      },
      "getAnswer(uint256)": {
        "notice": "get past rounds answers"
      },
      "getRoundData(uint80)": {
        "notice": "get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
      },
      "getTimestamp(uint256)": {
        "notice": "get block timestamp when an answer was last updated"
      },
      "latestAnswer()": {
        "notice": "Reads the current answer from aggregator delegated to."
      },
      "latestRound()": {
        "notice": "get the latest completed round where the answer was updated"
      },
      "latestRoundData()": {
        "notice": "get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
      },
      "latestTimestamp()": {
        "notice": "get the latest completed round where the answer was updated. This ID includes the proxy's phase, to make sure round IDs increase even when switching to a newly deployed aggregator."
      },
      "phaseId()": {
        "notice": "returns the current phase's ID."
      },
      "proposeAggregator(address)": {
        "notice": "Allows the owner to propose a new address for the aggregator"
      },
      "proposedGetRoundData(uint80)": {
        "notice": "Used if an aggregator contract has been proposed."
      },
      "proposedLatestRoundData()": {
        "notice": "Used if an aggregator contract has been proposed."
      },
      "setController(address)": {
        "notice": "Allows the owner to update the accessController contract address."
      },
      "version()": {
        "notice": "the version number representing the type of aggregator the proxy points to."
      }
    },
    "notice": "A trusted proxy for updating where current answers are read fromThis contract provides a consistent address for the Aggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is trusted to update it.Only access enabled addresses are allowed to access getters for aggregated answers and round information."
  }
}